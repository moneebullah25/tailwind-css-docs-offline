(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4199],{3905:function(e,a,t){"use strict";t.d(a,{Zo:function(){return i},kt:function(){return k}});var s=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function c(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);a&&(s=s.filter(function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable})),t.push.apply(t,s)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?c(Object(t),!0).forEach(function(a){n(e,a,t[a])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach(function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})}return e}var p=s.createContext({}),r=function(e){var a,t=s.useContext(p),n=t;return e&&(n="function"==typeof(a=e)?e(t):o(o({},t),e)),n},i=function(e){var a=r(e.components);return s.createElement(p.Provider,{value:a},e.children)},l={inlineCode:"code",wrapper:function(e){var a=e.children;return s.createElement(s.Fragment,{},a)}},m=s.forwardRef(function(e,a){var t=e.components,n=e.mdxType,c=e.originalType,p=e.parentName,i=function(e,a){if(null==e)return{};var t,s,n=function(e,a){if(null==e)return{};var t,s,n={},c=Object.keys(e);for(s=0;s<c.length;s++)t=c[s],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(s=0;s<c.length;s++)t=c[s],!(a.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}(e,["components","mdxType","originalType","parentName"]),m=r(t),k=m["".concat(p,".").concat(n)]||m[n]||l[n]||c;return t?s.createElement(k,o(o({ref:a},i),{},{components:t})):s.createElement(k,o({ref:a},i))});function k(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var c=t.length,o=Array(c);o[0]=m;var p={};for(var r in a)hasOwnProperty.call(a,r)&&(p[r]=a[r]);p.originalType=e,p.mdxType="string"==typeof e?e:n,o[1]=p;for(var i=2;i<c;i++)o[i]=t[i];return s.createElement.apply(null,o)}return s.createElement.apply(null,t)}m.displayName="MDXCreateElement"},33594:function(e,a,t){"use strict";t.d(a,{EL:function(){return i}});var s,n=t(67294),c=["bottom","height","left","right","top","width"],o=new Map,p=function e(){var a=[];o.forEach(function(e,t){var s,n,o=t.getBoundingClientRect();s=o,n=e.rect,void 0===s&&(s={}),void 0===n&&(n={}),c.some(function(e){return s[e]!==n[e]})&&(e.rect=o,a.push(e))}),a.forEach(function(e){e.callbacks.forEach(function(a){return a(e.rect)})}),s=window.requestAnimationFrame(e)},r="undefined"!=typeof window&&window.document&&window.document.createElement?n.useLayoutEffect:n.useEffect;function i(e,a,t){"boolean"==typeof(c=a)?l=a:(l=null==(k=null==a?void 0:a.observe)||k,m=null==a?void 0:a.onChange),(i=t)&&"[object Function]"==({}).toString.call(i)&&(m=t);var c,i,l,m,k,u=(0,n.useState)(e.current),N=u[0],g=u[1],d=(0,n.useRef)(!1),b=(0,n.useRef)(!1),j=(0,n.useState)(null),O=j[0],h=j[1],y=(0,n.useRef)(m);return r(function(){y.current=m,e.current!==N&&g(e.current)}),r(function(){N&&!d.current&&(d.current=!0,h(N.getBoundingClientRect()))},[N]),r(function(){if(l){var a=N;if(b.current||(b.current=!0,a=e.current),a){var t,n,c=(t=a,n=function(e){null==y.current||y.current(e),h(e)},{observe:function(){var e=0===o.size;o.has(t)?o.get(t).callbacks.push(n):o.set(t,{rect:void 0,hasRectChanged:!1,callbacks:[n]}),e&&p()},unobserve:function(){var e=o.get(t);if(e){var a=e.callbacks.indexOf(n);a>=0&&e.callbacks.splice(a,1),e.callbacks.length||o.delete(t),o.size||cancelAnimationFrame(s)}}});return c.observe(),function(){c.unobserve()}}}},[l,N,e]),O}},79399:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/using-with-preprocessors",function(){return t(1318)}])},1318:function(e,a,t){"use strict";t.r(a),t.d(a,{default:function(){return N}});var s=t(99534);t(67294);var n,c=t(3905),o=t(41664),p=t.n(o),r=t(5679),i=t(53339),l=t(74296),m=t(55390),k={Layout:i.L,meta:{title:"Using with Preprocessors",description:"A guide to using Tailwind with common CSS preprocessors like Sass, Less, and Stylus."},slug:"using-with-preprocessors",tableOfContents:[{title:"Using PostCSS as your preprocessor",slug:"using-post-css-as-your-preprocessor",children:[{title:"Build-time imports",slug:"build-time-imports",children:[]},{title:"Nesting",slug:"nesting",children:[]},{title:"Variables",slug:"variables",children:[]},{title:"Vendor prefixes",slug:"vendor-prefixes",children:[]}]},{title:"Using Sass, Less, or Stylus",slug:"using-sass-less-or-stylus",children:[{title:"Sass",slug:"sass",children:[]},{title:"Less",slug:"less",children:[]},{title:"Stylus",slug:"stylus",children:[]}]}]},u=l.X_;function N(e){var a=e.components,t=(0,s.Z)(e,["components"]);return(0,c.kt)(u,Object.assign({},k,t,{components:a,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"Since Tailwind is a PostCSS plugin, there’s nothing stopping you from using it with Sass, Less, Stylus, or other preprocessors, just like you can with other PostCSS plugins like ",(0,c.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/postcss/autoprefixer"}),"Autoprefixer"),"."),(0,c.kt)("p",null,"It’s important to note that ",(0,c.kt)("strong",{parentName:"p"},"you don’t need to use a preprocessor with Tailwind")," — you typically write very little CSS on a Tailwind project anyways so using a preprocessor just isn’t as beneficial as it would be in a project where you write a lot of custom CSS."),(0,c.kt)("p",null,"This guide only exists as a reference for people who need to integrate Tailwind with a preprocessor for reasons outside of their control, not because it is a recommended practice."),(0,c.kt)("hr",null),(0,c.kt)(r.X,{level:2,id:"using-post-css-as-your-preprocessor",nextElement:{type:"paragraph"}},"Using PostCSS as your preprocessor"),(0,c.kt)("p",null,"If you’re using Tailwind for a brand new project and don’t need to integrate it with any existing Sass/Less/Stylus stylesheets, you should highly consider relying on other PostCSS plugins to add the preprocessor features you use instead of using a separate preprocessor."),(0,c.kt)("p",null,"This has a few benefits:"),(0,c.kt)("ul",Object.assign({},{role:"list"}),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"Your builds will be faster"),". Since your CSS doesn’t have to be parsed and processed by multiple tools, your CSS will compile much quicker using only PostCSS."),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"No quirks or workarounds.")," Because Tailwind adds some new non-standard keywords to CSS (like ",(0,c.kt)("inlineCode",{parentName:"li"},"@tailwind"),", ",(0,c.kt)("inlineCode",{parentName:"li"},"@apply"),", ",(0,c.kt)("inlineCode",{parentName:"li"},"theme()"),", etc.), you often have to write your CSS in annoying, unintuitive ways to get a preprocessor to give you the expected output. Working exclusively with PostCSS avoids this.")),(0,c.kt)("p",null,"For a fairly comprehensive list of available PostCSS plugins see the ",(0,c.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/postcss/postcss/blob/master/docs/plugins.md"}),"PostCSS GitHub repository"),", but here are a few important ones we use on our own projects and can recommend."),(0,c.kt)(r.X,{level:3,id:"build-time-imports",nextElement:{type:"paragraph"}},"Build-time imports"),(0,c.kt)("p",null,"One of the most useful features preprocessors offer is the ability to organize your CSS into multiple files and combine them at build time by processing ",(0,c.kt)("inlineCode",{parentName:"p"},"@import")," statements in advance, instead of in the browser."),(0,c.kt)("p",null,"The canonical plugin for handling this with PostCSS is ",(0,c.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/postcss/postcss-import"}),"postcss-import"),"."),(0,c.kt)("p",null,"To use it, install the plugin via npm:"),(0,c.kt)("pre",Object.assign({},{className:"language-shell"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"npm")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"install")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token parameter variable"}),"-D")," postcss-import")),(0,c.kt)("p",null,"Then add it as the very first plugin in your PostCSS configuration:"),(0,c.kt)("pre",Object.assign({},{className:"language-js"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// postcss.config.js"),"\nmodule",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property-access"}),"exports")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"plugins"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string-property property"}),"'postcss-import'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"tailwindcss"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"autoprefixer"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)("p",null,"One important thing to note about ",(0,c.kt)("inlineCode",{parentName:"p"},"postcss-import")," is that it strictly adheres to the CSS spec and disallows ",(0,c.kt)("inlineCode",{parentName:"p"},"@import")," statements anywhere except at the very top of a file."),(0,c.kt)(m.qm,{mdxType:"TipBad"},"Won't work, `@import` statements must come first"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* components.css */"),"\n\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".btn"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"padding"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'spacing.4'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'spacing.2'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* ... */"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* Will not work */"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@import")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token string"}),'"./components/card"'),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")))),(0,c.kt)("p",null,"The easiest solution to this problem is to never mix regular CSS and imports in the same file. Instead, create one main entry-point file for your imports, and keep all of your actual CSS in separate files."),(0,c.kt)(m.Vw,{mdxType:"TipGood"},"Use separate files for imports and actual CSS"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* components.css */"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@import")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token string"}),'"./components/buttons.css"'),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@import")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token string"}),'"./components/card.css"'),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")))),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* components/buttons.css */"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".btn"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"padding"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'spacing.4'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'spacing.2'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* ... */"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* components/card.css */"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".card"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"padding"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'spacing.4'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* ... */"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)("p",null,"The place you are most likely to run into this situation is in your main CSS file that includes your ",(0,c.kt)("inlineCode",{parentName:"p"},"@tailwind")," declarations."),(0,c.kt)(m.qm,{mdxType:"TipBad"},"Won't work, `@import` statements must come first"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@tailwind")," base",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@import")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token string"}),'"./custom-base-styles.css"'),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@tailwind")," components",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@import")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token string"}),'"./custom-components.css"'),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@tailwind")," utilities",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@import")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token string"}),'"./custom-utilities.css"'),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")))),(0,c.kt)("p",null,"You can solve this by creating separate files for each ",(0,c.kt)("inlineCode",{parentName:"p"},"@tailwind")," declaration, and then importing those files in your main stylesheet. To make this easy, we provide separate files for each ",(0,c.kt)("inlineCode",{parentName:"p"},"@tailwind")," declaration out of the box that you can import directly from ",(0,c.kt)("inlineCode",{parentName:"p"},"node_modules"),"."),(0,c.kt)("p",null,"The ",(0,c.kt)("inlineCode",{parentName:"p"},"postcss-import")," plugin is smart enough to look for files in the ",(0,c.kt)("inlineCode",{parentName:"p"},"node_modules")," folder automatically, so you don’t need to provide the entire path — ",(0,c.kt)("inlineCode",{parentName:"p"},'"tailwindcss/base"')," for example is enough."),(0,c.kt)(m.Vw,{mdxType:"TipGood"},"Import our provided CSS files"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@import")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token string"}),'"tailwindcss/base"'),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@import")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token string"}),'"./custom-base-styles.css"'),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@import")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token string"}),'"tailwindcss/components"'),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@import")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token string"}),'"./custom-components.css"'),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@import")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token string"}),'"tailwindcss/utilities"'),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@import")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token string"}),'"./custom-utilities.css"'),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")))),(0,c.kt)(r.X,{level:3,id:"nesting",nextElement:{type:"paragraph"}},"Nesting"),(0,c.kt)("p",null,"To add support for nested declarations, we recommend our bundled ",(0,c.kt)("inlineCode",{parentName:"p"},"tailwindcss/nesting")," plugin, which is a PostCSS plugin that wraps ",(0,c.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/postcss/postcss-nested"}),"postcss-nested")," or ",(0,c.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/jonathantneal/postcss-nesting"}),"postcss-nesting")," and acts as a compatibility layer to make sure your nesting plugin of choice properly understands Tailwind’s custom syntax like ",(0,c.kt)("inlineCode",{parentName:"p"},"@apply")," and ",(0,c.kt)("inlineCode",{parentName:"p"},"@screen"),"."),(0,c.kt)("p",null,"It’s included directly in the ",(0,c.kt)("inlineCode",{parentName:"p"},"tailwindcss")," package itself, so to use it all you need to do is add it to your PostCSS configuration, somewhere before Tailwind:"),(0,c.kt)("pre",Object.assign({},{className:"language-js"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// postcss.config.js"),"\nmodule",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property-access"}),"exports")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"plugins"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string-property property"}),"'postcss-import'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string-property property"}),"'tailwindcss/nesting'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"tailwindcss"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"autoprefixer"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)("p",null,"By default, it uses the ",(0,c.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/postcss/postcss-nested"}),"postcss-nested")," plugin under the hood, which uses a Sass-like syntax and is the plugin that powers nesting support in the ",(0,c.kt)(p(),{href:"/docs/plugins#css-in-js-syntax",passHref:!0},(0,c.kt)("a",null,"Tailwind CSS plugin API")),"."),(0,c.kt)("p",null,"If you’d rather use ",(0,c.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/jonathantneal/postcss-nesting"}),"postcss-nesting")," (which is based on the work-in-progress ",(0,c.kt)("a",Object.assign({parentName:"p"},{href:"https://drafts.csswg.org/css-nesting-1/"}),"CSS Nesting")," specification), first install the plugin:"),(0,c.kt)("pre",Object.assign({},{className:"language-shell"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"npm")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"install")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token parameter variable"}),"-D")," postcss-nesting")),(0,c.kt)("p",null,"Then pass the plugin itself as an argument to ",(0,c.kt)("inlineCode",{parentName:"p"},"tailwindcss/nesting")," in your PostCSS configuration:"),(0,c.kt)("pre",Object.assign({},{className:"language-js"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// postcss.config.js"),"\nmodule",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property-access"}),"exports")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"plugins"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string-property property"}),"'postcss-import'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string-property property"}),"'tailwindcss/nesting'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'postcss-nesting'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"tailwindcss"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"autoprefixer"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)("p",null,"This can also be helpful if for whatever reason you need to use a very specific version of ",(0,c.kt)("inlineCode",{parentName:"p"},"postcss-nested")," and want to override the version we bundle with ",(0,c.kt)("inlineCode",{parentName:"p"},"tailwindcss/nesting")," itself."),(0,c.kt)("p",null,"Note that if you are using ",(0,c.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/csstools/postcss-plugins/tree/main/plugin-packs/postcss-preset-env"}),(0,c.kt)("inlineCode",{parentName:"a"},"postcss-preset-env"))," in your project, you should make sure to disable nesting and let ",(0,c.kt)("inlineCode",{parentName:"p"},"tailwindcss/nesting")," handle it for you instead:"),(0,c.kt)("pre",Object.assign({},{className:"language-js"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// postcss.config.js"),"\nmodule",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property-access"}),"exports")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"plugins"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string-property property"}),"'postcss-import'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string-property property"}),"'tailwindcss/nesting'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'postcss-nesting'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"tailwindcss"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string-property property"}),"'postcss-preset-env'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n      ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"features"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string-property property"}),"'nesting-rules'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token boolean"}),"false")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)(r.X,{level:3,id:"variables",nextElement:{type:"paragraph"}},"Variables"),(0,c.kt)("p",null,"These days CSS variables (officially known as custom properties) have really good ",(0,c.kt)("a",Object.assign({parentName:"p"},{href:"https://caniuse.com/#search=css%20custom%20properties"}),"browser support"),", so you don’t need a preprocessor to use variables at all."),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token pseudo-class"}),":root"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token variable"}),"--theme-color"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token hexcode color"}),"#52b3d0"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* ... */"),"\n\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".btn"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"background-color"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"var"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token variable"}),"--theme-color"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* ... */"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)("p",null,"We use CSS variables extensively within Tailwind itself, so if you can use Tailwind, you can use native CSS variables."),(0,c.kt)("p",null,"You may also find that most of the things you’ve used variables for in the past can be replaced with Tailwind’s ",(0,c.kt)("inlineCode",{parentName:"p"},"theme()")," function, which gives you access to all of your design tokens from your ",(0,c.kt)("inlineCode",{parentName:"p"},"tailwind.config.js")," file directly in your CSS:"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".btn"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"background-color"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'colors.blue.500'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"padding"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'spacing.2'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'spacing.4'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token comment"}),"/* ... */"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)("p",null,"Learn more about the ",(0,c.kt)("inlineCode",{parentName:"p"},"theme()")," function in our ",(0,c.kt)(p(),{href:"/docs/functions-and-directives#theme",passHref:!0},(0,c.kt)("a",null,"functions and directives documentation")),";"),(0,c.kt)(r.X,{level:3,id:"vendor-prefixes",nextElement:{type:"paragraph"}},"Vendor prefixes"),(0,c.kt)("p",null,"For automatically managing vendor prefixes in your CSS, you should use ",(0,c.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/postcss/autoprefixer"}),"Autoprefixer"),"."),(0,c.kt)("p",null,"To use it, install it via npm:"),(0,c.kt)("pre",Object.assign({},{className:"language-shell"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"npm")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"install")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token parameter variable"}),"-D")," autoprefixer")),(0,c.kt)("p",null,"Then add it to the very end of your plugin list in your PostCSS configuration:"),(0,c.kt)("pre",Object.assign({},{className:"language-js"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"module",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property-access"}),"exports")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"plugins"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"tailwindcss"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token literal-property property"}),"autoprefixer"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)("hr",null),(0,c.kt)(r.X,{level:2,id:"using-sass-less-or-stylus",nextElement:{type:"paragraph"}},"Using Sass, Less, or Stylus"),(0,c.kt)("p",null,"For the best development experience, we highly recommended that you ",(0,c.kt)("a",Object.assign({parentName:"p"},{href:"#using-post-css-as-your-preprocessor"}),"use PostCSS exclusively"),", and that you don’t use preprocessors like Sass or Less in your Tailwind projects."),(0,c.kt)("p",null,"To use Tailwind with a preprocessing tool like Sass, Less, or Stylus, you’ll need to add an additional build step to your project that lets you run your preprocessed CSS through PostCSS. If you’re using Autoprefixer in your project, you already have something like this set up."),(0,c.kt)("p",null,"See our documentation on ",(0,c.kt)(p(),{href:"/docs/installation/using-postcss",passHref:!0},(0,c.kt)("a",null,"installing Tailwind as a PostCSS plugin"))," to learn more about integrating Tailwind into your existing build process."),(0,c.kt)("p",null,"The most important thing to understand about using Tailwind with a preprocessor is that ",(0,c.kt)("strong",{parentName:"p"},"preprocessors like Sass, Less, and Stylus run separately, before Tailwind"),". This means that you can’t feed output from Tailwind’s ",(0,c.kt)("inlineCode",{parentName:"p"},"theme()")," function into a Sass color function for example, because the ",(0,c.kt)("inlineCode",{parentName:"p"},"theme()")," function isn’t actually evaluated until your Sass has been compiled to CSS and fed into PostCSS."),(0,c.kt)(m.qm,{mdxType:"TipBad"},"Won't work, Sass is processed first"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".alert"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"background-color"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"darken"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'colors.red.500'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token number"}),"10"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token unit"}),"%"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)("p",null,"Aside from that, each preprocessor has its own quirk or two when used with Tailwind, which are outlined with workarounds below."),(0,c.kt)(r.X,{level:3,id:"sass",nextElement:{type:"paragraph"}},"Sass"),(0,c.kt)("p",null,"When using Tailwind with Sass, using ",(0,c.kt)("inlineCode",{parentName:"p"},"!important")," with ",(0,c.kt)("inlineCode",{parentName:"p"},"@apply")," requires you to use interpolation to compile properly."),(0,c.kt)(m.qm,{mdxType:"TipBad"},"Won't work, Sass complains about !important"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".alert"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule atapply"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@apply")," bg-red-500 ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token important"}),"!important"),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)(m.Vw,{mdxType:"TipGood"},"Use interpolation as a workaround"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".alert"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule atapply"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@apply")," bg-red-500 #"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token important"}),"!important"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)(r.X,{level:3,id:"less",nextElement:{type:"paragraph"}},"Less"),(0,c.kt)("p",null,"When using Tailwind with Less, you cannot nest Tailwind’s ",(0,c.kt)("inlineCode",{parentName:"p"},"@screen")," directive."),(0,c.kt)(m.qm,{mdxType:"TipBad"},"Won't work, Less doesn't realise it's a media query"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".card"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule atapply"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@apply")," rounded-none",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@screen")," sm")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule atapply"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@apply")," rounded-lg",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)("p",null,"Instead, use a regular media query along with the ",(0,c.kt)("inlineCode",{parentName:"p"},"theme()")," function to reference your screen sizes, or simply don’t nest your ",(0,c.kt)("inlineCode",{parentName:"p"},"@screen")," directives."),(0,c.kt)(m.Vw,{mdxType:"TipGood"},"Use a regular media query and theme()"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".card"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule atapply"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@apply")," rounded-none",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@media")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token property"}),"min-width"),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token string"}),"'screens.sm'"),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),")"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule atapply"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@apply")," rounded-lg",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)(m.Vw,{mdxType:"TipGood"},"Use the @screen directive at the top-level"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".card"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule atapply"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@apply")," rounded-none",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@screen")," sm")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".card"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule atapply"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@apply")," rounded-lg",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),";")),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)(r.X,{level:3,id:"stylus",nextElement:{type:"paragraph"}},"Stylus"),(0,c.kt)("p",null,"When using Tailwind with Stylus, you can’t use Tailwind’s ",(0,c.kt)("inlineCode",{parentName:"p"},"@apply")," feature without wrapping the entire CSS rule in ",(0,c.kt)("inlineCode",{parentName:"p"},"@css")," so that Stylus treats it as literal CSS:"),(0,c.kt)(m.qm,{mdxType:"TipBad"},"Won't work, Stylus complains about @apply"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".card"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  @apply rounded-lg bg-white p-4\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)(m.Vw,{mdxType:"TipGood"},"Use @css to avoid processing as Stylus"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@css"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".card"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    @apply rounded-lg bg-white p-4\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)("p",null,"This comes with a significant cost however, which is that ",(0,c.kt)("strong",{parentName:"p"},"you cannot use any Stylus features inside a ",(0,c.kt)("inlineCode",{parentName:"strong"},"@css")," block"),"."),(0,c.kt)("p",null,"Another option is to use the ",(0,c.kt)("inlineCode",{parentName:"p"},"theme()")," function instead of ",(0,c.kt)("inlineCode",{parentName:"p"},"@apply"),", and write out the actual CSS properties in long form:"),(0,c.kt)(m.Vw,{mdxType:"TipGood"},"Use theme() instead of @apply"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".card"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"border-radius"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'borderRadius.lg'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"background-color"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'colors.white'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"padding"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'spacing.4'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)("p",null,"In addition to this, Stylus doesn’t support nesting the ",(0,c.kt)("inlineCode",{parentName:"p"},"@screen")," directive (just like Less)."),(0,c.kt)(m.qm,{mdxType:"TipBad"},"Won't work, Stylus doesn't realise it's a media query"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".card"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"border-radius"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@screen")," sm")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"border-radius"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'borderRadius.lg'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)("p",null,"Instead, use a regular media query along with the ",(0,c.kt)("inlineCode",{parentName:"p"},"theme()")," function to reference your screen sizes, or simply don’t nest your ",(0,c.kt)("inlineCode",{parentName:"p"},"@screen")," directives."),(0,c.kt)(m.Vw,{mdxType:"TipGood"},"Use a regular media query and theme()"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".card"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"border-radius"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@media")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token property"}),"min-width"),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token string"}),"'screens.sm'"),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),")"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"border-radius"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'borderRadius.lg'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))),(0,c.kt)(m.Vw,{mdxType:"TipGood"},"Use the @screen directive at the top-level"),(0,c.kt)("pre",Object.assign({},{className:"language-css"}),(0,c.kt)("code",Object.assign({parentName:"pre"},{className:"language-css"}),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".card"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"border-radius"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token atrule"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token rule"}),"@screen")," sm")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token selector"}),(0,c.kt)("span",Object.assign({parentName:"span"},{className:"token class"}),".card"))," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token property"}),"border-radius"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":")," ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token function"}),"theme"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token string"}),"'borderRadius.lg'"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n",(0,c.kt)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"))))}N.isMDXComponent=!0,N.layoutProps=k},55390:function(e,a,t){"use strict";t.d(a,{$o:function(){return o},Vw:function(){return n},qm:function(){return c}});var s=t(85893);function n(e){var a=e.children;return(0,s.jsxs)("div",{className:"flex items-start my-6 space-x-4",children:[(0,s.jsxs)("div",{className:"relative mt-1 w-4 h-4 rounded-full bg-cyan-500 text-white flex items-center justify-center ring-2 ring-cyan-500 dark:bg-sky-500 dark:ring-sky-500",children:[(0,s.jsx)("svg",{width:"6",height:"4.5",className:"overflow-visible","aria-hidden":"true",children:(0,s.jsx)("path",{d:"M6 0L2 4.5L0 2.5",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})}),(0,s.jsx)("div",{className:"absolute top-full mt-1 left-[0.46875rem] w-px h-[1.375rem] bg-cyan-500/30 rounded-full dark:bg-sky-400/30"})]}),(0,s.jsx)("p",{className:"m-0 flex-1 text-base font-semibold text-slate-900 dark:text-slate-200",children:a})]})}function c(e){var a=e.children;return(0,s.jsxs)("div",{className:"flex items-start my-6 space-x-4",children:[(0,s.jsxs)("div",{className:"relative mt-1 w-4 h-4 rounded-full bg-rose-400 text-white flex items-center justify-center ring-2 ring-rose-400 dark:bg-red-400 dark:ring-red-400",children:[(0,s.jsx)("svg",{width:"6",height:"6",className:"overflow-visible","aria-hidden":"true",children:(0,s.jsx)("path",{d:"M0 0L6 6M6 0L0 6",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})}),(0,s.jsx)("div",{className:"absolute top-full mt-1 left-[0.46875rem] w-px h-[1.375rem] bg-rose-200 rounded-full dark:bg-red-200/25"})]}),(0,s.jsx)("p",{className:"m-0 flex-1 text-base font-semibold text-slate-900 dark:text-slate-200",children:a})]})}function o(e){var a=e.children;return(0,s.jsxs)("div",{className:"not-prose mt-6 -mb-1 flex space-x-2",children:[(0,s.jsx)("svg",{className:"flex-none w-5 h-5 text-slate-400 dark:text-slate-600",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",children:(0,s.jsx)("path",{fillRule:"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z",clipRule:"evenodd"})}),(0,s.jsx)("p",{className:"text-slate-700 text-sm font-medium dark:text-slate-200",children:a})]})}},53339:function(e,a,t){"use strict";t.d(a,{L:function(){return r}});var s=t(26042),n=t(85893),c=t(21744),o=t(99440),p=t(54713);function r(e){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.Dx,{children:e.layoutProps.meta.metaTitle||e.layoutProps.meta.title}),(0,n.jsx)(c.C,(0,s.Z)({nav:p.u},e))]})}r.nav=p.u},29815:function(e,a,t){"use strict";t.d(a,{Z:function(){return o}});var s=t(20943),n=t(13375),c=t(91566);function o(e){return function(e){if(Array.isArray(e))return(0,s.Z)(e)}(e)||(0,n.Z)(e)||(0,c.Z)(e)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}}},function(e){e.O(0,[8555,2474,4713,9774,2888,179],function(){return e(e.s=79399)}),_N_E=e.O()}]);